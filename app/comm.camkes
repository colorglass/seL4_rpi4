import <std_connector.camkes>;
import <global-connectors.camkes>;

import "components/Pixhawk_RX/Pixhawk_RX.camkes";
import "components/Telemetry_RX/Telemetry_RX.camkes";
import "components/Decrypt/Decrypt.camkes";
import "components/Encrypt/Encrypt.camkes";
import "components/RX/RX.camkes";
import <TimeServer/TimeServer.camkes>;

#if (VM_LINUX == 1)
import <vm.camkes>;
#endif

#define HIGHEST_PRIORITY 255

assembly {
    composition {
        // component Pixhawk_RX    pixhawk_rx;
        // component Telemetry_RX  telem_rx;
        component RX rx;
        component Decrypt       decrypt;
        component Encrypt       encrypt;
        // component TimeServer    time_server;

        connection seL4SharedData   dataport_pixhawk_to_encrypt     (from rx.ring_buffer_encrypt,   to encrypt.ring_buffer);
        connection seL4SharedData   dataport_telem_to_decrypt       (from rx.ring_buffer_decrypt,     to decrypt.ring_buffer);

        // connection seL4TimeServer timeerrrr(from pixhawk_rx.timer, to time_server.the_timer);
    }

    configuration {
        time_server.timers_per_client = 1;

        rx.affinity = 3;
        // pixhawk_rx.affinity = 3;
        // telem_rx.affinity   = 2;
        decrypt.affinity    = 2;
        encrypt.affinity    = 2;

        rx.priority = HIGHEST_PRIORITY;
        // pixhawk_rx.priority = HIGHEST_PRIORITY;
        // telem_rx.priority   = HIGHEST_PRIORITY;
        decrypt.priority    = HIGHEST_PRIORITY;
        encrypt.priority    = HIGHEST_PRIORITY;

        pixhawk_rx.ring_buffer_access   = "RW";
        telem_rx.ring_buffer_access     = "RW";
        decrypt.ring_buffer_access      = "RW";
        encrypt.ring_buffer_access      = "RW";
    }
}
