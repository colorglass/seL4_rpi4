/*
 * Copyright 2017, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#include <configurations/vm.h>

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <vm-connectors.camkes>;
import <VM_Arm/VM.camkes>;

#define VM0_RAM_BASE 0x10000000
#define VM0_RAM_SIZE 0x20000000
#define VM0_KERNEL_ENTRY (VM0_RAM_BASE + 0x80000)
#define VM0_DTB_ADDR 0x24000000
#define VM0_INITRD_ADDR 0x20000000

#define VM1_RAM_BASE 0x40000000
#define VM1_RAM_SIZE 0x20000000

assembly {
    composition {
        VM_GENERAL_COMPOSITION_DEF()
        VM_COMPOSITION_DEF(0)
        VM_COMPOSITION_DEF(1)
        connection seL4VMDTBPassthrough vm0_dtb(from vm0.dtb_self, to vm0.dtb);
        connection seL4VMDTBPassthrough vm1_dtb(from vm1.dtb_self, to vm1.dtb);
    }
    
    configuration {
        VM_GENERAL_CONFIGURATION_DEF()
        VM_CONFIGURATION_DEF(0)
        VM_CONFIGURATION_DEF(1)

        vm0.num_extra_frame_caps = 0;
        vm0.extra_frame_map_address = 0;
        vm0.cnode_size_bits = 23;
        vm0.simple_untyped24_pool = 12;

        vm0.vm_address_config = {
            "ram_base" : VAR_STRINGIZE(VM0_RAM_BASE),
            "ram_paddr_base" : VAR_STRINGIZE(VM0_RAM_BASE),
            "ram_size" : VAR_STRINGIZE(VM0_RAM_SIZE),
            "dtb_addr" : VAR_STRINGIZE(VM0_DTB_ADDR),
            "initrd_addr" : VAR_STRINGIZE(VM0_INITRD_ADDR),
            "kernel_entry_addr" : VAR_STRINGIZE(VM0_KERNEL_ENTRY),
        };

        vm0.vm_image_config = {
            "map_one_to_one" : true,
            "provide_initrd" : false,
        };

        vm0.num_vcpus = 1;

        vm0.dtb = dtb([
                        {"path": "/soc/cprman@7e101000"},
                        {"path": "/soc/aux@7e215000"},
                        {"path": "/soc/serial@7e215040"},
                        {"path": "/soc/dma@7e007000"},
                        {"path": "/soc/sdhci@7e300000"},
                        {"path": "/soc/mailbox@7e00b880"},
                        {"path": "/soc/mailbox@7e00b840"},
                        {"path": "/emmc2bus/emmc2@7e340000"},
                        {"path": "/scb/pcie@7d500000"},
                    ]);

        vm0.mmios = [
                    "0xff846000:0x1000:12", // Interrupt Controller Virtual CPU interface (Virtual Machine view)
                    "0xfe201000:0x1000:12"
        ];

        vm0.dtb_irqs = [153];

        vm0.untyped_mmios = [
                    //"0xff846000:12", // Interrupt Controller Virtual CPU interface (Virtual Machine view)
                    "0x10000000:28", // Linux kernel memory regions
                    "0x20000000:28",
                    "0x600000000:30",
                    ];


        vm1.num_extra_frame_caps = 0;
        vm1.extra_frame_map_address = 0;
        vm1.cnode_size_bits = 23;
        vm1.simple_untyped24_pool = 12;

        // specify vm memory address configuration
        vm1.vm_address_config = {

            // virtual address in IPA, kernel loaded at, VM RAM installed at
            "ram_base" : VAR_STRINGIZE(VM1_RAM_BASE),

            // specify the range of the physical memory assigned to VM as RAM
            "ram_paddr_base" : VAR_STRINGIZE(VM1_RAM_BASE),
            "ram_size" : VAR_STRINGIZE(VM1_RAM_SIZE),

            // we not use these
            "dtb_addr" : "0",
            "initrd_addr" : "0",

            // kernel entry address, assigned as the bootargs of vcpu
            "kernel_entry_addr" : VAR_STRINGIZE(VM1_RAM_BASE),
        };

        // specify vm image configuration
        vm1.vm_image_config = {

            // kernel file name in the file server
            "kernel_name" : "matrix653",

            // we do not use DTB and initrd here
            "provide_dtb" : false,
            "generate_dtb" : false,
            "provide_initrd" : false,

            // flag to clean cache when loading images, set to false since we only run on one core
            "clean_cache" : true,

            // set to true to make a one by one mapping of RAM from IPA to PA
            "map_one_to_one" : true,
        };

        // use one core
        vm1.num_vcpus = 1;

        // claim device resource by dtb 
        vm1.dtb = dtb([{}
        //                {"path": "/soc/serial@7e201000"},
                    ]);

        vm1.mmios = [
                    "0xff846000:0x1000:12", // Interrupt Controller Virtual CPU interface (Virtual Machine view)
                    "0xfe201000:0x1000:12",
        ];

        // claim device untyped object
        vm1.untyped_mmios = [
                    //"0xff846000:12", // Interrupt Controller Virtual CPU interface (Virtual Machine view)
                    "0x40000000:29", // Linux kernel memory regions
                    ];
    }
}
